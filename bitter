#!/usr/bin/env python

# The BSD License
#
# Copyright (c) 2011, Eric Davis
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

#
# Home: https://github.com/insanum/bitter
#
# Author: Eric Davis <edavis@insanum.com> <http://www.insanum.com>
#

import sys, getopt

class CLR:
    clr = None

    def __init__(self, clr):

        try:
            from colorama import Fore, Style
            if   (clr == "black"):    self.clr = Fore.BLACK   + Style.NORMAL
            elif (clr == "bblack"):   self.clr = Fore.BLACK   + Style.BRIGHT
            elif (clr == "red"):      self.clr = Fore.RED     + Style.NORMAL
            elif (clr == "bred"):     self.clr = Fore.RED     + Style.BRIGHT
            elif (clr == "green"):    self.clr = Fore.GREEN   + Style.NORMAL
            elif (clr == "bgreen"):   self.clr = Fore.GREEN   + Style.BRIGHT
            elif (clr == "yellow"):   self.clr = Fore.YELLOW  + Style.NORMAL
            elif (clr == "byellow"):  self.clr = Fore.YELLOW  + Style.BRIGHT
            elif (clr == "blue"):     self.clr = Fore.BLUE    + Style.NORMAL
            elif (clr == "bblue"):    self.clr = Fore.BLUE    + Style.BRIGHT
            elif (clr == "magenta"):  self.clr = Fore.MAGENTA + Style.NORMAL
            elif (clr == "bmagenta"): self.clr = Fore.MAGENTA + Style.BRIGHT
            elif (clr == "cyan"):     self.clr = Fore.CYAN    + Style.NORMAL
            elif (clr == "bcyan"):    self.clr = Fore.CYAN    + Style.BRIGHT
            elif (clr == "white"):    self.clr = Fore.WHITE   + Style.NORMAL
            elif (clr == "bwhite"):   self.clr = Fore.WHITE   + Style.BRIGHT
            else:                     self.clr = ""
        except ImportError:
            return

    def __str__(self):
        return self.clr

# Default Colors
ValueColor  = CLR("byellow")
BorderColor = CLR("magenta")
BitColor    = CLR("red")
NormalColor = CLR("cyan")

ULONG_MAX = 4294967295
useASCII  = False
resetBit  = False
startBit  = 0

Top, Mid, Bot = range(3)
topUChars = { 'Dash':'─', 'Left':'┌', 'Right':'┐', 'Mid':'┬', 'Vert':'│'}
midUChars = { 'Dash':'─', 'Left':'├', 'Right':'┤', 'Mid':'┼', 'Vert':'│'}
botUChars = { 'Dash':'─', 'Left':'└', 'Right':'┘', 'Mid':'┴', 'Vert':'│'}
topAChars = { 'Dash':'-', 'Left':'-', 'Right':'-', 'Mid':'-', 'Vert':'|'}
midAChars = { 'Dash':'-', 'Left':'|', 'Right':'|', 'Mid':'|', 'Vert':'|'}
botAChars = { 'Dash':'-', 'Left':'-', 'Right':'-', 'Mid':'-', 'Vert':'|'}

data      = ''
topBorder = ''
midBorder = ''
botBorder = ''

def Usage():
    sys.stdout.write('''
Usage: bitter [<args>] [<value> ...]

  -h          this text
  -n          no colors
  -a          ascii drawing
  -b          reset start bit label for each argument
  --sb=<bit>  start bit label (default 0)
  --vc=<clr>  value color (default byellow)
  --bc=<clr>  border color (default magenta)
  --ic=<clr>  bit color (default red)
  --nc=<clr>  normal color (cyan)

  <value>     dec:  decdigit+
              hex:  '0' ('x'|'X') hexdigit+
              oct:  '0' ('o'|'O') octdigit+ | '0' octdigit+
              bin:  '0' ('b'|'B') bindigit+
              bits: comma separated and/or ranges
                    2,6,13-17,30

  <clr>       default, black, red, green, yellow
              blue, magenta, cyan, white
              NOTE: prefix a 'b' for bright (i.e. byellow)

''')
    sys.exit(1)

def BChar(border, c):
    if useASCII:
        if   border == Top: return topAChars[c]
        elif border == Mid: return midAChars[c]
        elif border == Bot: return botAChars[c]
        else:               return ' '
    else:
        if   border == Top: return topUChars[c]
        elif border == Mid: return midUChars[c]
        elif border == Bot: return botUChars[c]
        else:               return ' '

def P(msg, clr=NormalColor):
    return "%s%s%s" % (str(clr), msg, str(NormalColor))

def PColor(n, bit, val, bitVal=0):
    vert = BChar(Mid, 'Vert')
    out = ''

    if (bit == (n - 1)):
        out += P(vert, BorderColor)

    if (bitVal == 1):
        out += P('%d' % val, BitColor)
    else:
        out += P('%d' % val, NormalColor)

    if ((bit % 8) == 0):
        out += P(vert, BorderColor)
        if not bit:
            out += '\n'

    return out

def BuildBorders(n):
    global topBorder, midBorder, botBorder

    def BuildBorder(border, n):
        out = ''
        dash  = BChar(border, 'Dash')
        left  = BChar(border, 'Left')
        right = BChar(border, 'Right')
        mid   = BChar(border, 'Mid')
        for c in range(n):
            if c == 0:         out += P("%s%s"   % (left, dash),  BorderColor)
            elif c == (n - 1): out += P("%s%s\n" % (dash, right), BorderColor)
            elif (c % 8) == 0: out += P("%s%s"   % (mid, dash),   BorderColor)
            else:              out += P(           dash,          BorderColor)
        return out

    topBorder = BuildBorder(Top, n)
    midBorder = BuildBorder(Mid, n)
    botBorder = BuildBorder(Bot, n)

def PGroup(n, sb, v):
    global topBorder, midBorder, botBorder
    s0 = ''
    s1 = ''
    s2 = ''
    s3 = ''
    if (sb + n) >= 100:
        for b in reversed(range(n)):
            SB = b + sb
            BSET = ((v & (1 << b)) != 0)
            s0 += PColor(n, b, BSET,            BSET)
            s1 += PColor(n, b, (SB / 100),      BSET)
            s2 += PColor(n, b, (SB % 100) / 10, BSET)
            s3 += PColor(n, b, (SB % 100) % 10, BSET)
        out = "%s%s%s%s%s%s%s" % \
                  (topBorder, s0, midBorder, s1, s2, s3, botBorder)
    else:
        for b in reversed(range(n)):
            SB = b + sb
            BSET = ((v & (1 << b)) != 0)
            s0 += PColor(n, b, BSET,      BSET)
            s1 += PColor(n, b, (SB / 10), BSET)
            s2 += PColor(n, b, (SB % 10), BSET)
        out = "%s%s%s%s%s%s" % \
                  (topBorder, s0, midBorder, s1, s2, botBorder)
    return out

def BadBitArg(b):
    sys.stdout.write(P("ERROR: Invalid bit value \"%s\"\n" % b))
    Usage()

def StrToBit(b):
    v = int(b, 0)
    if ((v < 0) or (v > 64)):
        BadBitArg(b)
    return v

def GetBitArgsValue(arg):
    bitArgsValue = 0
    for bitArg in arg.split(","):
        if not bitArg: continue
        try:
            v = StrToBit(bitArg)
            bitArgsValue = (bitArgsValue | (0x1 << v))
        except:
            bitRange = bitArg.split("-")
            if (len(bitRange) != 2):
                BadBitArg(bitArg)
            try:
                v1 = StrToBit(bitRange[0])
                v2 = StrToBit(bitRange[1])
                if (v1 > v2):
                    BadBitArg(bitArg)
                for r in range(v1, (v2+1)):
                    bitArgsValue = (bitArgsValue | (0x1 << r))
            except:
                BadBitArg(bitArg)
    return bitArgsValue

try:
    opts, args = getopt.getopt(sys.argv[1:], 'hnab',
                               ['sb=', 'vc=','bc=','ic=','nc='])
except:
    Usage()

for opt, arg in opts:
    if (opt == '-h'):
        Usage()
    elif (opt == '-n'):
        ValueColor  = CLR("")
        BorderColor = CLR("")
        BitColor    = CLR("")
        NormalColor = CLR("")
    elif (opt == '-a'):
        useASCII = True
    elif (opt == '-b'):
        resetBit = True
    elif (opt == '--sb'):
        startBit = int(arg, 0)
    elif (opt == '--vc'):
        ValueColor = CLR(arg)
    elif (opt == '--bc'):
        BorderColor = CLR(arg)
    elif (opt == '--ic'):
        BitColor = CLR(arg)
    elif (opt == '--nc'):
        NormalColor = CLR(arg)

sb = startBit

for i in args:

    if resetBit:
        sb = startBit

    if i.find(",") != -1 or i.find("-") != -1:
        v = GetBitArgsValue(i)
    else:
        v = int(i, 0)

    if (v <= ULONG_MAX):

        BuildBorders(32)

        data += P("0x%08x\n" % v, ValueColor)
        data += PGroup(32, sb, v)

    else:

        BuildBorders(64)

        j = 0
        tmp = v
        while (tmp):
            j += 1
            tmp >>= 64
        if not j:
            j = 1

        data += P(("0x%0" + str(j * 16) + "x\n") % v, ValueColor)

        if j == 1:
            data += PGroup(64, sb, v)
            continue

        for _ in range(j):

            tmp = v & 0xffffffffffffffff
            v >>= 64

            data += P("    0x%016x\n" % tmp, ValueColor)
            data += PGroup(64, sb, tmp)

            sb += 64

sys.stdout.write(data)
sys.stdout.flush()

