#!/usr/bin/env python

# The BSD License
#
# Copyright (c) 2011, Eric Davis
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# Redistributions of source code must retain the above copyright notice, this
# list of conditions and the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright notice,
# this list of conditions and the following disclaimer in the documentation
# and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

#
# Home: https://github.com/insanum/bitter
#
# Author: Eric Davis <edavis@insanum.com> <http://www.insanum.com>
#

import sys, getopt

useClr = True

class CLR:
    clr = None

    def __init__(self, clr):

        try:
            from colorama import Fore, Style
            if   (clr == "black"):    self.clr = Fore.BLACK
            elif (clr == "bblack"):   self.clr = Fore.BLACK + Style.BRIGHT
            elif (clr == "red"):      self.clr = Fore.RED
            elif (clr == "bred"):     self.clr = Fore.RED + Style.BRIGHT
            elif (clr == "green"):    self.clr = Fore.GREEN
            elif (clr == "bgreen"):   self.clr = Fore.GREEN + Style.BRIGHT
            elif (clr == "yellow"):   self.clr = Fore.YELLOW
            elif (clr == "byellow"):  self.clr = Fore.YELLOW + Style.BRIGHT
            elif (clr == "blue"):     self.clr = Fore.BLUE
            elif (clr == "bblue"):    self.clr = Fore.BLUE + Style.BRIGHT
            elif (clr == "magenta"):  self.clr = Fore.MAGENTA
            elif (clr == "bmagenta"): self.clr = Fore.MAGENTA + Style.BRIGHT
            elif (clr == "cyan"):     self.clr = Fore.CYAN
            elif (clr == "bcyan"):    self.clr = Fore.CYAN + Style.BRIGHT
            elif (clr == "white"):    self.clr = Fore.WHITE
            elif (clr == "bwhite"):   self.clr = Fore.WHITE + Style.BRIGHT
            else:                     self.clr = Fore.RESET + Style.RESET_ALL
        except ImportError:
            return

    def __str__(self):
        if useClr and self.clr: return self.clr
        else:                   return ""

# Default Colors
ValueColor  = CLR("byellow")
BorderColor = CLR("magenta")
BitColor    = CLR("cyan")
NormalColor = CLR("default")

ULONG_MAX = 4294967295
inputLoop = False
Border, Value = range(2)

def PrintMsg(msg, clr=NormalColor):
    sys.stdout.write(str(clr) + msg + str(NormalColor))
    sys.stdout.flush()

def Usage():
    sys.stdout.write('''
Usage: bitter [<args>] [<value> ...]

  -h          this text
  -n          no colors
  -i          loop and prompt for new values
  --vc=<clr>  value color (default byellow)
  --bc=<clr>  border color (default magenta)
  --ic=<clr>  bit color (default cyan)
  --nc=<clr>  normal color (terminal default)

  <value>     dec:  decdigit+
              hex:  '0' ('x'|'X') hexdigit+
              oct:  '0' ('o'|'O') octdigit+ | '0' octdigit+
              bin:  '0' ('b'|'B') bindigit+
              bits: comma separated and/or ranges
                    2,6,13-17,30

  <clr>       default, black, red, green, yellow
              blue, magenta, cyan, white
              NOTE: prefix a 'b' for bright (i.e. byellow)

''')
    sys.exit(1)

def BS(n, v):
    return ((v & (1 << n)) != 0)

def RN(n):
    return reversed(range(n))

def PCol(rowType, n, bit, fmt, val, sep, bitVal=0):
    if (bit == (n - 1)):
        PrintMsg("%s" % sep, BorderColor)
    if (rowType == Value):
        if (bitVal == 1):
            PrintMsg(fmt % val, BitColor)
        else:
            PrintMsg(fmt % val, NormalColor)
    else: # (rowType == Border)
        PrintMsg(fmt % val, BorderColor)
    if ((bit % 8) == 0):
        PrintMsg("%s" % sep, BorderColor)
        if not bit:
            PrintMsg("\n")

def BadBitArg(b):
    PrintMsg("ERROR: Invalid bit value \"%s\"\n" % b)
    Usage()

def StrToBit(b):
    v = int(b, 0)
    if ((v < 0) or (v > 64)):
        BadBitArg(b)
    return v

def GetBitArgsValue(arg):
    bitArgsValue = 0
    for bitArg in arg.split(","):
        if not bitArg: continue
        try:
            v = StrToBit(bitArg)
            bitArgsValue = (bitArgsValue | (0x1 << v))
        except:
            bitRange = bitArg.split("-")
            if (len(bitRange) != 2):
                BadBitArg(bitArg)
            try:
                v1 = StrToBit(bitRange[0])
                v2 = StrToBit(bitRange[1])
                if (v1 > v2):
                    BadBitArg(bitArg)
                for r in range(v1, (v2+1)):
                    bitArgsValue = (bitArgsValue | (0x1 << r))
            except:
                BadBitArg(bitArg)
    return bitArgsValue

def GetUserInput():
    try:
        sys.stdout.write("value: ")
        sys.stdout.flush()
        userIn = sys.stdin.readline()
        return userIn.split()
    except:
        PrintMsg("\n")
        sys.exit(1)

try:
    opts, args = getopt.getopt(sys.argv[1:], 'hni', ['vc=','bc=','ic=','nc='])
except:
    Usage()

for opt, arg in opts:
    if (opt == '-h'):
        Usage()
    elif (opt == '-n'):
        useClr = False
    elif (opt == '-i'):
        inputLoop = True
    elif (opt == '--vc'):
        ValueColor = CLR(arg)
    elif (opt == '--bc'):
        BorderColor = CLR(arg)
    elif (opt == '--ic'):
        BitColor = CLR(arg)
    elif (opt == '--nc'):
        NormalColor = CLR(arg)

while True:

    if (len(args) < 1):
        args = GetUserInput()

    for i in args:

        if i.find(",") != -1 or i.find("-") != -1:
            v = GetBitArgsValue(i)
        else:
            v = int(i, 0)

        if (v > ULONG_MAX):
            n   = 64
            fmt = "0x%016x"
        else:
            n   = 32
            fmt = "0x%08x"

        PrintMsg(("--> " + fmt + " <--\n") % v, ValueColor)

        # PCol (rowType, n, bit, fmt, val, sep, bitVal)
        for b in RN(n): PCol(Border, n, b, "%s", "-",      "-")
        for b in RN(n): PCol(Value,  n, b, "%d", BS(b,v),  "|", BS(b,v))
        for b in RN(n): PCol(Border, n, b, "%s", "-",      "|")
        for b in RN(n): PCol(Value,  n, b, "%d", (b / 10), "|", BS(b,v))
        for b in RN(n): PCol(Value,  n, b, "%d", (b % 10), "|", BS(b,v))
        for b in RN(n): PCol(Border, n, b, "%s", "-",      "-")

    if inputLoop:
        args = GetUserInput()
    else:
        break

